(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{330:function(e,t,_){"use strict";_.r(t);var r=_(5),v=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"什麼是網頁、網站、前端、後端、ssr、csr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什麼是網頁、網站、前端、後端、ssr、csr"}},[e._v("#")]),e._v(" 什麼是網頁、網站、前端、後端、SSR、CSR？")]),e._v(" "),t("p",[e._v("一般通俗的來說，我們會去瀏覽別人的網站，這樣的說法實際上是沒有問題的，只是當我們要進行比較細部的說明時，這樣的說法會有一些漏洞。")]),e._v(" "),t("p",[e._v("一般來說，單就視覺上來討論，我瀏覽的是別人的「 網頁 」，而一個「 網站 」中可能會有很多、很多的網頁。")]),e._v(" "),t("p",[e._v("早期的網站通常由於使用技術相對簡單，雖然也沒那麼簡單，不過通常會是統包所有功能進行建製的網站類型，也就是現在比較通俗的說法「 全端 」，也稱為 full-stack，而現如今由於 JS 技術發展的相當成熟，且持續的進步，許多過往用於呈現網頁內容的技術，也就是最基本的 HTML、CSS、JS 這三個語言，由於技術相對成熟、複雜，已經不容易由獨立一人統包網站的全部功能，所以逐漸的演變為「 前端 」、「 後端 」兩個區塊。")]),e._v(" "),t("p",[e._v("網站的前端主要著重在頁面資料的呈現，以及相關的使用者體驗，甚至是 SEO，而近來的前端框架發展的也相當成熟，也衍伸出所謂「 SPA 」的技術，由於效能優異能提供使用者相當的體驗感受，但也由於其使用的虛擬路由技術，導致 SEO 受到某種程度上的阻礙，目前已經陸續有開發者關注且提出一些解決方案。")]),e._v(" "),t("blockquote",[t("p",[e._v("SPA，Single Page Application。")])]),e._v(" "),t("p",[e._v("網站的後端主要著重在資料的處理，這裡暫且先不討論以「 SSR 」方式產生網站的後端框架建構方式，在前、後端分離架構下的網站，後端程式語言主要作為橋接前端發送的請求以及後端資料庫管理的整合，通俗的一點來說，前端會透過後端構建的 APIs，進而去請求後端的資料與其互動，並呈現到前端頁面上供使用者瀏覽或進一步做其他處理。")]),e._v(" "),t("blockquote",[t("p",[e._v("SSR(Sever Side Render)，相對於 CSR(Client Side Render)。")])]),e._v(" "),t("p",[e._v("當然以往一站式的網站構建方式，通常也是現在所謂的「 SSR 」的網站，通常會有較優秀的 SEO，但由於少了虛擬路由的技術，會導致頁面切換時重載頁面導致的效能相對低落問題，但「 CSR 」的網站，通常會是前、後端分離的網站構建方式，透過請求後端資料將資料呈現到頁面，以虛擬路由的方式快速切換頁面，當然會有較優異的效能，但探究其機制會發現其失去了 SEO 這一網站利器，甚至網站後端的部署方式、網路傳輸的效率，都可能進一步影響網站整體的體驗，因此沒有「 絕對優秀的解決方案 」，只有當下「 相對優秀的解決方案 」。")]),e._v(" "),t("h2",{attrs:{id:"網路怎麼運作的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#網路怎麼運作的"}},[e._v("#")]),e._v(" 網路怎麼運作的？")]),e._v(" "),t("p",[e._v("我們都知道網路可以讓兩台處於異地的電腦彼此傳遞資料，那實際上網路是怎麼運作的？")]),e._v(" "),t("p",[e._v("我們將整個網路簡化成兩台電腦，這裡姑且不討論網路複雜的拓墣結構，其中會有一台電腦是作為使用者端或稱客戶端(Client Side)，這一方通常會是資料請求方，也就是負責發出請求(Requests)，而相對於此，會有一台電腦作為伺服端(Server Side)，主要用來回應、響應(Response)客端的請求，並且回傳資料、響應(Responses)。")]),e._v(" "),t("p",[e._v("客端以及伺服端是相對的概念，在伺服器部署的技術中，還會有所謂的代理伺服器(Proxy Server)的概念，這是一台介於我們主要的客端以及主要的伺服端之間的電腦，此時的 Proxy 對於我們的客端來說會是伺服端，而對主要存放資料的伺服端，Proxy 則會是客端，反之亦然。")]),e._v(" "),t("h3",{attrs:{id:"當我們在瀏覽器網址列輸入網址時-背後發生了什麼"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#當我們在瀏覽器網址列輸入網址時-背後發生了什麼"}},[e._v("#")]),e._v(" 當我們在瀏覽器網址列輸入網址時，背後發生了什麼？")]),e._v(" "),t("p",[e._v("這是一個我們參訪別人網站都會進行的流程，打開瀏覽器、輸入網址、按下確認，接著就會看到瀏覽器的視窗陸續被資料更新，不過這背後瀏覽器到底替我們完成了什麼工作？")]),e._v(" "),t("p",[e._v("當我們打開瀏覽器並且輸入網址後，由於電腦本身並不認得由英文字母組成的網址，因此會先透過 DNS 去向鄰近的 DNS Server 查詢實際的遠端電腦網址，也就是俗稱的 ip，由四組數字組成且分別由 . 號分隔的數組，不過實際上 IP 是一個網路協定，所以這個說法有一些微妙的差異，總之當我們透過 DNS 取得 IP address 之後，使用這個 IP address 向遠端的電腦發出請求，並透過 TCP 的三項交握與遠端電腦建立連線，接著才開始傳輸資料，而後接收這些回傳的網頁資料並渲染到瀏覽器上供使用者瀏覽。")]),e._v(" "),t("h4",{attrs:{id:"dns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[e._v("#")]),e._v(" DNS")]),e._v(" "),t("p",[e._v("DNS，Domain Name System，在今後的網站開發中，你可能會不時的聽到、看到「 域名 」的概念，這就是我們的 Domain Name，而透過 DNS 我們可以將域名轉換成電腦可以理解的 ip，也就是類似這樣的數組 "),t("code",[e._v("192.168.1.1")]),e._v("。")]),e._v(" "),t("p",[e._v("以 Google 的網址來舉例，"),t("code",[e._v("https://www.google.com/")]),e._v(" 中，"),t("code",[e._v("google.com")]),e._v(" 為我們實際的域名；"),t("code",[e._v("https")]),e._v(" 為請求的協定，此為 HTTP，其他還有現今比較少見的還有 "),t("code",[e._v("ftp")]),e._v("，或者連結本地檔案的 "),t("code",[e._v("file")]),e._v("；而 "),t("code",[e._v("www")]),e._v(" 則為子網域；在域名的 "),t("code",[e._v("/")]),e._v(" 之後若還有路徑，可能為檔案路徑或者查詢字串。")]),e._v(" "),t("h2",{attrs:{id:"未提及的東西"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#未提及的東西"}},[e._v("#")]),e._v(" 未提及的東西")]),e._v(" "),t("ul",[t("li",[e._v("TCP/IP 模型")]),e._v(" "),t("li",[e._v("資料的封裝，封包的概念")]),e._v(" "),t("li",[e._v("http 與 https 的差異")]),e._v(" "),t("li",[e._v("CDN 的概念")]),e._v(" "),t("li",[e._v("瀏覽器的渲染機制")])]),e._v(" "),t("blockquote",[t("p",[e._v("有些未提及的內容相對比較進階，可以有一些開發經驗再回頭來閱讀。")])]),e._v(" "),t("h2",{attrs:{id:"參考連結"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#參考連結"}},[e._v("#")]),e._v(" 參考連結")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN - How the web works？"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN - How does the internet work？"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);